[Info  - 20:38:25] 2024/08/19 20:38:25 Created View (#1)
	directory=/home/barbarik/go/stonks
	view_type="GoMod"
	root_dir="file:///home/barbarik/go/stonks"
	go_version="go version go1.23.0 linux/amd64"
	build_flags=[]
	env={GOOS:linux GOARCH:amd64 GOCACHE:/home/barbarik/.cache/go-build GOMODCACHE:/home/barbarik/go/pkg/mod GOPATH:/home/barbarik/go GOPRIVATE: GOFLAGS: GO111MODULE: GOTOOLCHAIN:auto GoVersion:23 GoVersionOutput:go version go1.23.0 linux/amd64
 ExplicitGOWORK: EffectiveGOPACKAGESDRIVER:}
	env_overlay=[]

[Info  - 20:38:25] 2024/08/19 20:38:25 go/packages.Load #1
	view_id="1"
	snapshot=0
	directory=/home/barbarik/go/stonks
	query=[/home/barbarik/go/stonks/... builtin]
	packages=2
	duration=373.182773ms

[Info  - 20:38:55] 2024/08/19 20:38:55 background imports cache refresh starting

[Info  - 20:38:55] 2024/08/19 20:38:55 background refresh finished after 94.789852ms

[Error - 20:40:56] 2024/08/19 20:40:56 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:19: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:40:57] 2024/08/19 20:40:57 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:20: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:40:58] 2024/08/19 20:40:58 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:28:9: missing ',' in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:00] 2024/08/19 20:41:00 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:25: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:01] 2024/08/19 20:41:01 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:32: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:02] 2024/08/19 20:41:02 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:33: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:03] 2024/08/19 20:41:03 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:35: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:04] 2024/08/19 20:41:04 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:39: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:04] 2024/08/19 20:41:04 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:37: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:05] 2024/08/19 20:41:05 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:39: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:06] 2024/08/19 20:41:06 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:43: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Info  - 20:41:10] 2024/08/19 20:41:10 background imports cache refresh starting

[Info  - 20:41:10] 2024/08/19 20:41:10 background refresh finished after 5.320391ms

[Error - 20:41:10] 2024/08/19 20:41:10 signature help failed: cannot get type for Fun *ast.SelectorExpr (&{e Childtext})
	position=26:42

[Error - 20:41:10] 2024/08/19 20:41:10 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:45: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:11] 2024/08/19 20:41:11 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:47: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:12] 2024/08/19 20:41:12 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:49: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:13] 2024/08/19 20:41:13 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:49: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:13] 2024/08/19 20:41:13 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:49: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:16] 2024/08/19 20:41:16 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:48: missing ',' before newline in argument list (and 46 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:26] 2024/08/19 20:41:26 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:49: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:41:37] 2024/08/19 20:41:37 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:27:49: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Info  - 20:42:14] 2024/08/19 20:42:14 background imports cache refresh starting

[Info  - 20:42:14] 2024/08/19 20:42:14 background refresh finished after 4.765399ms

[Info  - 20:43:54] 2024/08/19 20:43:54 background imports cache refresh starting

[Info  - 20:43:54] 2024/08/19 20:43:54 background refresh finished after 2.871311ms

[Error - 20:44:16] 2024/08/19 20:44:16 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:47:5: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:44:17] 2024/08/19 20:44:17 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:47:9: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:44:18] 2024/08/19 20:44:18 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:47:9: missing ',' before newline in composite literal
	file="/home/barbarik/go/stonks/main.go"

[Info  - 20:44:40] 2024/08/19 20:44:40 background imports cache refresh starting

[Info  - 20:44:40] 2024/08/19 20:44:40 background refresh finished after 5.181344ms

[Error - 20:48:33] 2024/08/19 20:48:33 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:14:26: expected ';', found `
	Price   string ` (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:48:33] 2024/08/19 20:48:33 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:14:26: expected ';', found `
	Price   string ` (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:48:34] 2024/08/19 20:48:34 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:14:26: expected ';', found `
	Price   string ` (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:48:34] 2024/08/19 20:48:34 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:14:26: expected ';', found `
	Price   string ` (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:48:35] 2024/08/19 20:48:35 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:14:26: expected ';', found `
	Price   string ` (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:48:36] 2024/08/19 20:48:36 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:16:18: expected ';', found csv (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:48:38] 2024/08/19 20:48:38 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:16:18: expected ';', found csv (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:48:39] 2024/08/19 20:48:39 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:16:18: expected ';', found csv (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:48:42] 2024/08/19 20:48:42 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:16:25: expected ';', found `
}

func scrapeStocks(ticker string, c *colly.Collector, stocks *[]Stock) {
	fmt.Println("Inside scrapeStocks")
	cc := c.Clone()

	url := fmt.Sprintf("https://finance.yahoo.com/quote/%s/", ticker)

	cc.OnHTML("div#quote-header-info", func(e *colly.HTMLElement) {
		stock := Stock{
			Company: strings.TrimSpace(e.ChildText("h1")),
			Price:   strings.TrimSpace(e.ChildText("fin-streamer[data-field='regularMarketPrice'] span")),
			Change:  strings.TrimSpace(e.ChildText("fin-streamer[data-field='regularMarketChange'] span")),
		}
		fmt.Printf("Fetched %s", stock.Company)
		*stocks = append(*stocks, stock)
		fmt.Printf("Added %s to list", stock.Company)
	})

	err := cc.Visit(url)

	if err != nil {
		log.Printf("Failed request for %s\n%v \nurl=%s", ticker, err, url)
	}

	cc.OnHTML("*", nil)
}

func main() {
	tickers := []string{
		"MSFT",
		//"ADANIPORTS.NS", "ASIANPAINT.NS", "AXISBANK.NS", "BAJAJ-AUTO.NS", "BAJAJFINSV.NS", "BAJFINANCE.NS", "BHARTIARTL.NS", "BPCL.NS",
		// "BRITANNIA.NS", "CIPLA.NS", "COALINDIA.NS", "DIVISLAB.NS", "DRREDDY.NS", "EICHERMOT.NS", "GRASIM.NS", "HCLTECH.NS", "HDFC.NS",
		// "HDFCBANK.NS", "HDFCLIFE.NS", "HEROMOTOCO.NS", "HINDALCO.NS", "HINDUNILVR.NS", "ICICIBANK.NS", "INDUSINDBK.NS", "INFY.NS", "IOC.NS",
		// "ITC.NS", "JSWSTEEL.NS", "KOTAKBANK.NS", "LT.NS", "M&M.NS", "MARUTI.NS", "NESTLEIND.NS", "NTPC.NS", "ONGC.NS", "POWERGRID.NS",
		// "RELIANCE.NS", "SBILIFE.NS", "SBIN.NS", "SHREECEM.NS", "SUNPHARMA.NS", "TATACONSUM.NS", "TATAMOTORS.NS", "TATASTEEL.NS",
		// "TCS.NS", "TECHM.NS", "TITAN.NS", "ULTRACEMCO.NS", "UPL.NS", "WIPRO.NS",
	}

	var stocks []Stock

	c := colly.NewCollector()

	c.OnRequest(func(r *colly.Request) {
		fmt.Println("Fetching ", r.URL)
	})

	c.OnError(func(_ *colly.Response, err error) {
		log.Println("Error ", err)
	})

	for _, ticker := range tickers {
		scrapeStocks(ticker, c, &stocks)
	}

	file, err := os.Create("stocks.csv")
	if err != nil {
		log.Fatal("Failed to create csv file: ", err)
	}

	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	headers := []string{"Company", "Price", "Change"}
	writer.Write(headers)

	for _, stock := range stocks {
		fmt.Printf("Adding %s to file", stock.Company)
		record := []string{stock.Company, stock.Price, stock.Change}
		writer.Write(record)
	}

	fmt.Println("All data written to file. Exiting.")

}
 (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:48:43] 2024/08/19 20:48:43 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:16:25: expected ';', found `
}

func scrapeStocks(ticker string, c *colly.Collector, stocks *[]Stock) {
	fmt.Println("Inside scrapeStocks")
	cc := c.Clone()

	url := fmt.Sprintf("https://finance.yahoo.com/quote/%s/", ticker)

	cc.OnHTML("div#quote-header-info", func(e *colly.HTMLElement) {
		stock := Stock{
			Company: strings.TrimSpace(e.ChildText("h1")),
			Price:   strings.TrimSpace(e.ChildText("fin-streamer[data-field='regularMarketPrice'] span")),
			Change:  strings.TrimSpace(e.ChildText("fin-streamer[data-field='regularMarketChange'] span")),
		}
		fmt.Printf("Fetched %s", stock.Company)
		*stocks = append(*stocks, stock)
		fmt.Printf("Added %s to list", stock.Company)
	})

	err := cc.Visit(url)

	if err != nil {
		log.Printf("Failed request for %s\n%v \nurl=%s", ticker, err, url)
	}

	cc.OnHTML("*", nil)
}

func main() {
	tickers := []string{
		"MSFT",
		//"ADANIPORTS.NS", "ASIANPAINT.NS", "AXISBANK.NS", "BAJAJ-AUTO.NS", "BAJAJFINSV.NS", "BAJFINANCE.NS", "BHARTIARTL.NS", "BPCL.NS",
		// "BRITANNIA.NS", "CIPLA.NS", "COALINDIA.NS", "DIVISLAB.NS", "DRREDDY.NS", "EICHERMOT.NS", "GRASIM.NS", "HCLTECH.NS", "HDFC.NS",
		// "HDFCBANK.NS", "HDFCLIFE.NS", "HEROMOTOCO.NS", "HINDALCO.NS", "HINDUNILVR.NS", "ICICIBANK.NS", "INDUSINDBK.NS", "INFY.NS", "IOC.NS",
		// "ITC.NS", "JSWSTEEL.NS", "KOTAKBANK.NS", "LT.NS", "M&M.NS", "MARUTI.NS", "NESTLEIND.NS", "NTPC.NS", "ONGC.NS", "POWERGRID.NS",
		// "RELIANCE.NS", "SBILIFE.NS", "SBIN.NS", "SHREECEM.NS", "SUNPHARMA.NS", "TATACONSUM.NS", "TATAMOTORS.NS", "TATASTEEL.NS",
		// "TCS.NS", "TECHM.NS", "TITAN.NS", "ULTRACEMCO.NS", "UPL.NS", "WIPRO.NS",
	}

	var stocks []Stock

	c := colly.NewCollector()

	c.OnRequest(func(r *colly.Request) {
		fmt.Println("Fetching ", r.URL)
	})

	c.OnError(func(_ *colly.Response, err error) {
		log.Println("Error ", err)
	})

	for _, ticker := range tickers {
		scrapeStocks(ticker, c, &stocks)
	}

	file, err := os.Create("stocks.csv")
	if err != nil {
		log.Fatal("Failed to create csv file: ", err)
	}

	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	headers := []string{"Company", "Price", "Change"}
	writer.Write(headers)

	for _, stock := range stocks {
		fmt.Printf("Adding %s to file", stock.Company)
		record := []string{stock.Company, stock.Price, stock.Change}
		writer.Write(record)
	}

	fmt.Println("All data written to file. Exiting.")

}
 (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:48:44] 2024/08/19 20:48:44 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:16:25: expected ';', found `
}

func scrapeStocks(ticker string, c *colly.Collector, stocks *[]Stock) {
	fmt.Println("Inside scrapeStocks")
	cc := c.Clone()

	url := fmt.Sprintf("https://finance.yahoo.com/quote/%s/", ticker)

	cc.OnHTML("div#quote-header-info", func(e *colly.HTMLElement) {
		stock := Stock{
			Company: strings.TrimSpace(e.ChildText("h1")),
			Price:   strings.TrimSpace(e.ChildText("fin-streamer[data-field='regularMarketPrice'] span")),
			Change:  strings.TrimSpace(e.ChildText("fin-streamer[data-field='regularMarketChange'] span")),
		}
		fmt.Printf("Fetched %s", stock.Company)
		*stocks = append(*stocks, stock)
		fmt.Printf("Added %s to list", stock.Company)
	})

	err := cc.Visit(url)

	if err != nil {
		log.Printf("Failed request for %s\n%v \nurl=%s", ticker, err, url)
	}

	cc.OnHTML("*", nil)
}

func main() {
	tickers := []string{
		"MSFT",
		//"ADANIPORTS.NS", "ASIANPAINT.NS", "AXISBANK.NS", "BAJAJ-AUTO.NS", "BAJAJFINSV.NS", "BAJFINANCE.NS", "BHARTIARTL.NS", "BPCL.NS",
		// "BRITANNIA.NS", "CIPLA.NS", "COALINDIA.NS", "DIVISLAB.NS", "DRREDDY.NS", "EICHERMOT.NS", "GRASIM.NS", "HCLTECH.NS", "HDFC.NS",
		// "HDFCBANK.NS", "HDFCLIFE.NS", "HEROMOTOCO.NS", "HINDALCO.NS", "HINDUNILVR.NS", "ICICIBANK.NS", "INDUSINDBK.NS", "INFY.NS", "IOC.NS",
		// "ITC.NS", "JSWSTEEL.NS", "KOTAKBANK.NS", "LT.NS", "M&M.NS", "MARUTI.NS", "NESTLEIND.NS", "NTPC.NS", "ONGC.NS", "POWERGRID.NS",
		// "RELIANCE.NS", "SBILIFE.NS", "SBIN.NS", "SHREECEM.NS", "SUNPHARMA.NS", "TATACONSUM.NS", "TATAMOTORS.NS", "TATASTEEL.NS",
		// "TCS.NS", "TECHM.NS", "TITAN.NS", "ULTRACEMCO.NS", "UPL.NS", "WIPRO.NS",
	}

	var stocks []Stock

	c := colly.NewCollector()

	c.OnRequest(func(r *colly.Request) {
		fmt.Println("Fetching ", r.URL)
	})

	c.OnError(func(_ *colly.Response, err error) {
		log.Println("Error ", err)
	})

	for _, ticker := range tickers {
		scrapeStocks(ticker, c, &stocks)
	}

	file, err := os.Create("stocks.csv")
	if err != nil {
		log.Fatal("Failed to create csv file: ", err)
	}

	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	headers := []string{"Company", "Price", "Change"}
	writer.Write(headers)

	for _, stock := range stocks {
		fmt.Printf("Adding %s to file", stock.Company)
		record := []string{stock.Company, stock.Price, stock.Change}
		writer.Write(record)
	}

	fmt.Println("All data written to file. Exiting.")

}
 (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Error - 20:48:44] 2024/08/19 20:48:44 imports fixes: allImportsFixes: /home/barbarik/go/stonks/main.go:16:25: expected ';', found `
}

func scrapeStocks(ticker string, c *colly.Collector, stocks *[]Stock) {
	fmt.Println("Inside scrapeStocks")
	cc := c.Clone()

	url := fmt.Sprintf("https://finance.yahoo.com/quote/%s/", ticker)

	cc.OnHTML("div#quote-header-info", func(e *colly.HTMLElement) {
		stock := Stock{
			Company: strings.TrimSpace(e.ChildText("h1")),
			Price:   strings.TrimSpace(e.ChildText("fin-streamer[data-field='regularMarketPrice'] span")),
			Change:  strings.TrimSpace(e.ChildText("fin-streamer[data-field='regularMarketChange'] span")),
		}
		fmt.Printf("Fetched %s", stock.Company)
		*stocks = append(*stocks, stock)
		fmt.Printf("Added %s to list", stock.Company)
	})

	err := cc.Visit(url)

	if err != nil {
		log.Printf("Failed request for %s\n%v \nurl=%s", ticker, err, url)
	}

	cc.OnHTML("*", nil)
}

func main() {
	tickers := []string{
		"MSFT",
		//"ADANIPORTS.NS", "ASIANPAINT.NS", "AXISBANK.NS", "BAJAJ-AUTO.NS", "BAJAJFINSV.NS", "BAJFINANCE.NS", "BHARTIARTL.NS", "BPCL.NS",
		// "BRITANNIA.NS", "CIPLA.NS", "COALINDIA.NS", "DIVISLAB.NS", "DRREDDY.NS", "EICHERMOT.NS", "GRASIM.NS", "HCLTECH.NS", "HDFC.NS",
		// "HDFCBANK.NS", "HDFCLIFE.NS", "HEROMOTOCO.NS", "HINDALCO.NS", "HINDUNILVR.NS", "ICICIBANK.NS", "INDUSINDBK.NS", "INFY.NS", "IOC.NS",
		// "ITC.NS", "JSWSTEEL.NS", "KOTAKBANK.NS", "LT.NS", "M&M.NS", "MARUTI.NS", "NESTLEIND.NS", "NTPC.NS", "ONGC.NS", "POWERGRID.NS",
		// "RELIANCE.NS", "SBILIFE.NS", "SBIN.NS", "SHREECEM.NS", "SUNPHARMA.NS", "TATACONSUM.NS", "TATAMOTORS.NS", "TATASTEEL.NS",
		// "TCS.NS", "TECHM.NS", "TITAN.NS", "ULTRACEMCO.NS", "UPL.NS", "WIPRO.NS",
	}

	var stocks []Stock

	c := colly.NewCollector()

	c.OnRequest(func(r *colly.Request) {
		fmt.Println("Fetching ", r.URL)
	})

	c.OnError(func(_ *colly.Response, err error) {
		log.Println("Error ", err)
	})

	for _, ticker := range tickers {
		scrapeStocks(ticker, c, &stocks)
	}

	file, err := os.Create("stocks.csv")
	if err != nil {
		log.Fatal("Failed to create csv file: ", err)
	}

	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	headers := []string{"Company", "Price", "Change"}
	writer.Write(headers)

	for _, stock := range stocks {
		fmt.Printf("Adding %s to file", stock.Company)
		record := []string{stock.Company, stock.Price, stock.Change}
		writer.Write(record)
	}

	fmt.Println("All data written to file. Exiting.")

}
 (and 3 more errors)
	file="/home/barbarik/go/stonks/main.go"

[Info  - 20:48:59] 2024/08/19 20:48:59 background imports cache refresh starting

[Info  - 20:48:59] 2024/08/19 20:48:59 background refresh finished after 5.293127ms

[Info  - 20:53:02] 2024/08/19 20:53:02 background imports cache refresh starting

[Info  - 20:53:02] 2024/08/19 20:53:02 background refresh finished after 5.140975ms

[Info  - 20:53:36] 2024/08/19 20:53:36 background imports cache refresh starting

[Info  - 20:53:36] 2024/08/19 20:53:36 background refresh finished after 5.509169ms

[Info  - 20:54:06] 2024/08/19 20:54:06 background imports cache refresh starting

[Info  - 20:54:06] 2024/08/19 20:54:06 background refresh finished after 5.982399ms

[Info  - 20:55:48] 2024/08/19 20:55:48 background imports cache refresh starting

[Info  - 20:55:48] 2024/08/19 20:55:48 background refresh finished after 4.891745ms

[Info  - 21:01:51] 2024/08/19 21:01:51 background imports cache refresh starting

[Info  - 21:01:51] 2024/08/19 21:01:51 background refresh finished after 4.368283ms

[Info  - 21:02:22] 2024/08/19 21:02:22 background imports cache refresh starting

[Info  - 21:02:22] 2024/08/19 21:02:22 background refresh finished after 2.640603ms

[Info  - 22:28:14] 2024/08/19 22:28:14 Shutdown session
	shutdown_session=1

