{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/config.ts"],"names":[],"mappings":";;;AACA,4DAAmD;AACnD,0CAAyC;AAEzC;IAAgC,sCAAM;IACpC,oBAAY,MAAc,EAAE,OAAqB;;QAC/C,IAAM,eAAe,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,CAAC;QACjD,IAAM,iBAAiB,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,iBAAiB,mCAAI,IAAI,WAAI,EAAE,CAAC;eAEnE,wDACK,OAAO,KACV,MAAM,QAAA,EACN,eAAe,iBAAA,EACf,iBAAiB,mBAAA,IACjB;IACJ,CAAC;IACH,iBAAC;AAAD,CAAC,AAZD,CAAgC,uBAAM,GAYrC;AAZY,gCAAU;AAchB,IAAM,aAAa,GAAG,UAAC,MAAc,EAAE,SAAuB;IACnE,OAAO,IAAI,UAAU,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAC3C,CAAC,CAAC;AAFW,QAAA,aAAa,iBAExB","sourcesContent":["import { NodeOptions, NodeConfig as INodeConfig } from '@amplitude/analytics-types';\nimport { Config } from '@amplitude/analytics-core';\nimport { Http } from './transports/http';\n\nexport class NodeConfig extends Config implements INodeConfig {\n  constructor(apiKey: string, options?: NodeOptions) {\n    const storageProvider = options?.storageProvider;\n    const transportProvider = options?.transportProvider ?? new Http();\n\n    super({\n      ...options,\n      apiKey,\n      storageProvider,\n      transportProvider,\n    });\n  }\n}\n\nexport const useNodeConfig = (apiKey: string, overrides?: NodeOptions): INodeConfig => {\n  return new NodeConfig(apiKey, overrides);\n};\n"]}